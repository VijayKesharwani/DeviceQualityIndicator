openapi: 3.0.3
info:
  title: Device Quality Indicator and Subscriptions
  description: |
    This API allows customers to query and subscribe to the device network status, including availability, open data volume, congestion, historical congestion, and connectivity status (2G, 3G, 4G, 5G).

    # Introduction

    ## Device Quality Indicator

    API consumers are able to inquire about the device's connected network status.

    ## Device Quality Indicator Subscriptions

    API consumers can subscribe to quality indicator events related to device network status, including connectivity, speed, data volume thresholds, and network type or quality changes.

    # Relevant terms and definitions

    * **Device**: A device refers to any physical entity that can connect to a network and participate in network communication. At least one identifier for the device (user equipment) out of four options: IPv4 address, IPv6 address, Phone number, or Network Access Identifier assigned by the mobile network operator for the device.
    
    * **Availability**: It provides the customer with the ability to check if a device is losing connection to the network or gets reachable again, and the roaming status.
      - `CONNECTED_SMS`, if the device is connected to the network via SMS usage
      - `CONNECTED_DATA`, if the device is connected to the network via data usage
      - `NOT_CONNECTED`, if the device is not connected to the network
    
    * **Network Insights**: The network provides application's networking requirements for a given end user session.

    * **Network Type**: Intended to provide insight into the connected network's capabilities.
      - `4GLTE`: Connected to the 4G network
      - `5GNSA`: Connected to the 4G network using 5G New Radio (NR) capability
      - `5GSA`: Connected to the 5G network
      - `NON3GPP4G`: Connected to the 4G network via WiFi
      - `NON3GPP5G`: Connected to the 5G network via WiFi

    * **Remaining Data Volume**: Remaining data volume of the contract (e.g., <200MB/<1GB).
      - `size`: Defines remaining data volume (e.g., <200MB, <1GB).

    * **Speed Limit**: Speed limitations of the contract.

    # API Functionality

    ## Device Quality Indicator

    - The endpoint `POST /retrieve` allows customers to retrieve the current device network status.

    ## Device Quality Indicator Subscriptions

    - The endpoint `POST /subscriptions` allows customers to manage event subscriptions related to device network status, including its availability, network type, data usage, and network quality.

    The following event `types` are managed by this API:
      - `org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-sms`: Event triggered when the device is connected via SMS usage.
      - `org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-data`: Event triggered when the device is connected via data usage.
      - `org.camaraproject.device-quality-indicator-subscriptions.v0.quality-not-connected`: Event triggered when the device is no longer connected.
      - `org.camaraproject.device-quality-indicator-subscriptions.v0.network-type-change`: Event triggered when the device changes its network type (e.g., from 4G to 5G).
      - `org.camaraproject.device-quality-indicator-subscriptions.v0.network-quality`: Event triggered when there is a change in the network quality (e.g., low, medium, high).
      - `org.camaraproject.device-quality-indicator-subscriptions.v0.network-congestion`: Event triggered when network congestion occurs.
      - `org.camaraproject.device-quality-indicator-subscriptions.v0.data-volume`: Event triggered when a device reaches data usage thresholds (e.g., 50%, 75%, 90%).

    Additionally, `org.camaraproject.device-quality-indicator-subscriptions.v0.subscription-ends` is sent when the subscription ends (no dedicated subscription required).

    ### Notifications Callback

    - Consumers must expose a callback URL (`POST /{$request.body#/sink}`) to receive notifications about device quality indicator events.

    ## Further info and support

    (FAQs will be added in a later version of the documentation)

  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: wip
  x-camara-commonalities: 0.4.0

externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/

servers:
  - url: "{apiRoot}/device-quality-indicator/v0"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root

tags:
  - name: Device Quality Indicator
    description: Operations to get the device network status.
  - name: Device Quality Indicator Subscriptions
    description: Manage subscriptions to device quality indicator events.

paths:
  /retrieve:
    post:
      tags:
        - Device Quality Indicator
      summary: "Get the device network status"
      description: Get the device network status
      operationId: getDeviceNetworkStatus
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - openId:
            - device-network-status:read
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestDeviceNetworkStatus"
        required: true
      responses:
        "200":
          description: Contains device network status
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceNetworkStatusResponse"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/DeviceNetworkStatusPermissionDenied403"
        "404":
          $ref: "#/components/responses/DeviceNetworkStatusNotFound404"
        "406":
          $ref: "#/components/responses/Generic406"
        "415":
          $ref: "#/components/responses/Generic415"
        "422":
          $ref: "#/components/responses/DeviceNetworkStatusUnprocessableEntity422"
        "429":
          $ref: "#/components/responses/Generic429"
        "500":
          $ref: "#/components/responses/Generic500"
        "501":
          $ref: "#/components/responses/Generic501"
        "502":
          $ref: "#/components/responses/Generic502"
        "503":
          $ref: "#/components/responses/Generic503"
        "504":
          $ref: "#/components/responses/Generic504"

  /subscriptions:
    post:
      tags:
        - Device Quality Indicator Subscriptions
      summary: "Create a device quality indicator subscription for a device"
      description: Create a subscription for device quality indicator events
      operationId: createDeviceQualityIndicatorSubscription
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - openId:
            - device-quality-indicator-subscriptions:org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-sms:create
            - device-quality-indicator-subscriptions:org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-data:create
            - device-quality-indicator-subscriptions:org.camaraproject.device-quality-indicator-subscriptions.v0.quality-not-connected:create
            - device-quality-indicator-subscriptions:org.camaraproject.device-quality-indicator-subscriptions.v0.network-quality:create
            - device-quality-indicator-subscriptions:org.camaraproject.device-quality-indicator-subscriptions.v0.network-congestion:create
            - device-quality-indicator-subscriptions:org.camaraproject.device-quality-indicator-subscriptions.v0.data-volume:create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionRequest"
        required: true
      callbacks:
        notifications:
          "{$request.body#/sink}":
            post:
              summary: "notifications callback"
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The Device status server will call this endpoint whenever any device quality indicator event occurs.
              operationId: postNotification
              parameters:
                - $ref: '#/components/parameters/x-correlator'
              requestBody:
                required: true
                content:
                  application/cloudevents+json:
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                    examples:
                      quality-connected-sms:
                        $ref: "#/components/examples/QUALITY_CONNECTED_SMS"
                      quality-connected-data:
                        $ref: "#/components/examples/QUALITY_CONNECTED_DATA"
                      quality-not-connected:
                        $ref: "#/components/examples/QUALITY_NOT_CONNECTED"
                      network-quality:
                        $ref: "#/components/examples/NETWORK_QUALITY"
                      network-congestion:
                        $ref: "#/components/examples/NETWORK_CONGESTION"
                      data-volume:
                        $ref: "#/components/examples/DATA_VOLUME"
                      subscription-ends:
                        $ref: "#/components/examples/SUBSCRIPTION_ENDS"
              responses:
                "204":
                  description: Successful notification
                  headers:
                    x-correlator:
                      $ref: '#/components/headers/x-correlator'
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "429":
                  $ref: "#/components/responses/Generic429"
                "500":
                  $ref: "#/components/responses/Generic500"
                "503":
                  $ref: "#/components/responses/Generic503"
              security:
                - {}
                - notificationsBearerAuth: []

      responses:
        "201":
          description: Created
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "202":
          description: Request accepted to be processed. It applies for async creation process.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionAsync"
        "400":
          $ref: "#/components/responses/CreateSubscriptionBadRequest400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/CreateSubscription403"
        "409":
          $ref: "#/components/responses/Generic409"
        "422":
          $ref: "#/components/responses/CreateSubscriptionUnprocessableEntity422"
        "429":
          $ref: "#/components/responses/Generic429"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
    get:
      tags:
        - Device Quality Indicator Subscriptions
      summary: "Retrieve a list of device quality indicator event subscriptions"
      description: Retrieve a list of device quality indicator event subscription(s)
      operationId: retrieveSubscriptionList
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - openId:
            - device-quality-indicator-subscriptions:read
      responses:
        "200":
          description: List of event subscription details
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: "#/components/schemas/Subscription"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "429":
          $ref: "#/components/responses/Generic429"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"

  /subscriptions/{subscriptionId}:
    get:
      tags:
        - Device Quality Indicator Subscriptions
      summary: "Retrieve a device quality indicator event subscription for a device"
      operationId: retrieveSubscription
      description: Retrieve a specific subscription by ID
      security:
        - openId:
            - device-quality-indicator-subscriptions:read
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"
        - $ref: '#/components/parameters/x-correlator'
      responses:
        "200":
          description: OK
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
              examples:
                subscription-active:
                  $ref: "#/components/examples/SUBSCRIPTION_ACTIVE"
                subscription-activation-requested:
                  $ref: "#/components/examples/SUBSCRIPTION_ACTIVATION_REQUESTED"
                subscription-deleted:
                  $ref: "#/components/examples/SUBSCRIPTION_DELETED"
        "400":
          $ref: "#/components/responses/SubscriptionIdRequired"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "429":
          $ref: "#/components/responses/Generic429"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"

    delete:
      tags:
        - Device Quality Indicator Subscriptions
      summary: "Delete a device quality indicator event subscription for a device"
      operationId: deleteSubscription
      description: Delete a subscription by ID
      security:
        - openId:
            - device-quality-indicator-subscriptions:delete
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"
        - $ref: '#/components/parameters/x-correlator'
      responses:
        "204":
          description: Event subscription deleted
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
        "202":
          description: Request accepted to be processed. This applies to async deletion process.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionAsync"
        "400":
          $ref: "#/components/responses/SubscriptionIdRequired"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "429":
          $ref: "#/components/responses/Generic429"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"

components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
    SubscriptionId:
      name: subscriptionId
      in: path
      description: Subscription identifier that was obtained from the create event subscription operation
      required: true
      schema:
        $ref: "#/components/schemas/SubscriptionId"
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
  schemas:
    LastStatusTime:
      description: Last time that the associated connected Network Type was updated
      type: string
      format: date-time
      example: "2024-02-20T10:41:38.657Z"

    DeviceNetworkStatusResponse:
      type: object
      required:
        - availabilityStatus
        - networkType
        - networkQualityInsight
        - remainingDataVolume
        - speedLimit
      properties:
        lastStatusTime:
          $ref: "#/components/schemas/LastStatusTime"
        availabilityStatus:
          $ref: "#/components/schemas/AvailabilityStatus"
        networkQualityInsight:
          $ref: "#/components/schemas/NetworkQualityInsight"
        networkType:
          $ref: "#/components/schemas/NetworkType"
        remainingDataVolume:
          $ref: "#/components/schemas/RemainingDataVolume"
        speedLimit:
          $ref: "#/components/schemas/SpeedLimit"
    AvailabilityStatus:
      description: |
        CONNECTED_DATA: The device is connected to the network for Data usage

        CONNECTED_SMS: The device is connected to the network for SMS usage

        NOT_CONNECTED: The device is not connected
      type: string
      enum:
        - CONNECTED_DATA
        - CONNECTED_SMS
        - NOT_CONNECTED
    NetworkType:
      description: |
        * NOT_CONNECTED: The device is not connected to network
        * 4GLTE: 4th Generation Mobile Communication Technology aka LTE
        * 5GNSA:4th Generation Mobile Communication Technology aka LTE with device connected 5G New Radio (NR)
        * 5GSA: 5th Generation Mobile Communication Technology
        * NON3GPP4G: Device connected via non-3GPP Radio Access Technology but connected to 4G Network (e.g. WiFi Calling)
        * NON3GPP5G: Device connected via non-3GPP Radio Access Technology but connected to 5G Network (e.g. WiFi Calling)
      type: string
      enum:
        - 4GLTE
        - 5GNSA
        - 5GSA
        - NON3GPP4G
        - NON3GPP5G
        - NOT-CONNECTED
    NetworkQualityInsight:
      type: object
      description: the network's confidence level at being able to meet the
        network demands of a given policy for a given terminal device.
      properties:
        packetDelayBudget:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        targetMinDownstreamRate:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        targetMinUpstreamRate:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        packetlossErrorRate:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        jitter:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        additionalKPIs:
          $ref: "#/components/schemas/AdditionalKpis"
    PolicyFulfillmentConfidence:
      type: string
      description: |
        a plain-language indicator of how confident the network is to meet a
        given network demand.
      enum:
        - meets the application requirements
        - unable to meet the application requirements
    AdditionalKpis:
      description: additional information about connectivity quality
      type: object
      properties:
        signalStrength:
          description: |
            rough indication of the end user device radio signal conditions
          type: string
          enum:
            - excellent
            - good
            - fair
            - poor
            - no signal
        connectivityType:
          description: |
            the access technology connecting the user device to the operator
            network
          type: string
          enum:
            - 5G-SA
            - 5G-NSA
            - 4G
            - 3G
    RemainingDataVolume:
      description: Remaining data volume of the contract allocation
      type: object
      properties:
        size:
          type: string
          description: "Remaining data volume size, for example '<200MB' or '<1GB'."
          enum:
            - "<200MB"
            - "<500MB"
            - "<1GB"
            - "<5GB"
            - "<10GB"
            - "Unlimited"
          example: "<200MB"
    SpeedLimit:
      type: object
      properties:
        limit:
          type: string
          description: "Speed limitations of the contract, for example '<2Mbps' or '<10Mbps'."
          enum:
            - "<1Mbps"
            - "<2Mbps"
            - "<5Mbps"
            - "<10Mbps"
            - "<50Mbps"
            - "Unlimited"
          example: "<2Mbps"
    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    RequestDeviceNetworkStatus:
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"
      required:
        - device

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description

    SubscriptionRequest:
      description: The request for creating a device quality indicator subscription
      type: object
      required:
        - sink
        - protocol
        - config
        - types
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          type: string
          format: url
          description: The address to which events shall be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        sinkCredential:
          allOf:
            - description: A sink credential provides authentication or authorization information necessary to enable delivery of events to a target.
            - $ref: "#/components/schemas/SinkCredential"
        types:
          description: |
            Event types eligible to be delivered by this subscription for device quality indicators.
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: "#/components/schemas/SubscriptionEventType"
        config:
          $ref: "#/components/schemas/Config"
      discriminator:
        propertyName: protocol
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionRequest"
          MQTT3: "#/components/schemas/MQTTSubscriptionRequest"
          MQTT5: "#/components/schemas/MQTTSubscriptionRequest"
          AMQP: "#/components/schemas/AMQPSubscriptionRequest"
          NATS: "#/components/schemas/NATSSubscriptionRequest"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionRequest"

    Protocol:
      type: string
      enum: ["HTTP", "MQTT3", "MQTT5", "AMQP", "NATS", "KAFKA"]
      description: Identifier of a delivery protocol. Only HTTP is allowed for now.
      example: "HTTP"

    Config:
      description: |
        Implementation-specific configuration parameters for acquiring device quality indicator events.
      type: object
      required:
        - subscriptionDetail
      properties:
        subscriptionDetail:
          $ref: "#/components/schemas/SubscriptionDetail"
        subscriptionExpireTime:
          type: string
          format: date-time
          example: 2023-01-17T13:18:23.682Z
          description: The subscription expiration time (in date-time format).
        subscriptionMaxEvents:
          type: integer
          description: Identifies the maximum number of event reports to be generated (>=1).
          minimum: 1
          example: 5
        initialEvent:
          type: boolean
          description: |
            Set to `true` if the consumer wants an event triggered immediately if the current situation reflects the event request.

    SinkCredential:
      type: object
      properties:
        credentialType:
          type: string
          enum:
            - PLAIN
            - ACCESSTOKEN
            - REFRESHTOKEN
          description: The type of the credential.
      discriminator:
        propertyName: credentialType
        mapping:
          PLAIN: "#/components/schemas/PlainCredential"
          ACCESSTOKEN: "#/components/schemas/AccessTokenCredential"
          REFRESHTOKEN: "#/components/schemas/RefreshTokenCredential"
      required:
        - credentialType

    PlainCredential:
      type: object
      description: A plain credential for authentication, containing an identifier and a secret.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          required:
            - identifier
            - secret
          properties:
            identifier:
              description: The identifier (e.g., username).
              type: string
            secret:
              description: The secret (e.g., password).
              type: string

    AccessTokenCredential:
      type: object
      description: An access token credential for authentication.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: A previously acquired token for accessing the resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: Expiry time for the access token.
            accessTokenType:
              type: string
              enum:
                - bearer
      required:
        - accessToken
        - accessTokenExpiresUtc
        - accessTokenType

    SubscriptionDetail:
      description: The details of the requested device quality indicator subscription.
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"
      required:
        - device

    Subscription:
      description: Represents a device quality indicator subscription.
      type: object
      required:
        - sink
        - protocol
        - config
        - types
        - id
        - startsAt
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          type: string
          format: url
          description: The address where events will be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        sinkCredential:
          $ref: "#/components/schemas/SinkCredential"
        types:
          description: |
            Device Quality Indicator event types eligible for delivery by this subscription.
          type: array
          items:
            type: string
        config:
          $ref: "#/components/schemas/Config"
        id:
          $ref: "#/components/schemas/SubscriptionId"
        startsAt:
          type: string
          format: date-time
          description: Date when the event subscription starts.
        expiresAt:
          type: string
          format: date-time
          description: Date when the subscription expires, if applicable.
        status:
          type: string
          description: Current status of the subscription.
          enum:
            - ACTIVATION_REQUESTED
            - ACTIVE
            - EXPIRED
            - INACTIVE
            - DELETED
      discriminator:
        propertyName: protocol
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionResponse"
          MQTT3: "#/components/schemas/MQTTSubscriptionResponse"
          MQTT5: "#/components/schemas/MQTTSubscriptionResponse"
          AMQP: "#/components/schemas/AMQPSubscriptionResponse"
          NATS: "#/components/schemas/NATSSubscriptionResponse"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionResponse"

    SubscriptionEventType:
      type: string
      description: |
        Event types that can be triggered for device quality indicators.
      enum:
        - org.camaraproject.device-quality-indicator-subscriptions.v0.network-quality
        - org.camaraproject.device-quality-indicator-subscriptions.v0.device-health

    SubscriptionAsync:
      description: Response for a device quality indicator subscription operation managed asynchronously (Creation or Deletion).
      type: object
      properties:
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    SubscriptionId:
      type: string
      format: uuid
      description: Unique identifier for the subscription.
      example: 550e8400-e29b-41d4-a716-446655440000

    NotificationEventType:
      type: string
      description: |
        quality-connected-sms - Event triggered when the device is connected to the network via SMS usage.
      
        quality-connected-data - Event triggered when the device is connected to the network via data usage.
      
        quality-not-connected - Event triggered when the device is no longer connected to the network.
      
        network-type-change - Event triggered when the device changes its network type (e.g., from 4G to 5G).
      
        network-quality - Event triggered when there is a change in the device’s network quality (e.g., low, medium, high network quality).
      
        network-congestion - Event triggered when the network experiences congestion affecting the device.
      
        data-volume - Event triggered when the device reaches certain data usage thresholds (e.g., 50%, 75%, 90% of the data plan used).
      
        subscription-ends - Event triggered when the subscription is terminated
      enum:
        - org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-sms
        - org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-data
        - org.camaraproject.device-quality-indicator-subscriptions.v0.quality-not-connected
        - org.camaraproject.device-quality-indicator-subscriptions.v0.network-type-change
        - org.camaraproject.device-quality-indicator-subscriptions.v0.network-quality
        - org.camaraproject.device-quality-indicator-subscriptions.v0.network-congestion
        - org.camaraproject.device-quality-indicator-subscriptions.v0.data-volume
        - org.camaraproject.device-quality-indicator-subscriptions.v0.subscription-ends

    CloudEvent:
      description: The notification callback
      required:
        - id
        - source
        - specversion
        - type
        - time
        - data
      properties:
        id:
          type: string
          description: identifier of this event, that must be unique in the source context.
          example: sd5e-uy52-88t4-za66
        source:
          $ref: "#/components/schemas/Source"
        type:
          $ref: "#/components/schemas/NotificationEventType"
        specversion:
          type: string
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          enum:
            - "1.0"
        datacontenttype:
          type: string
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          enum:
            - application/json
        data:
          type: object
          description: Event details payload described in each CAMARA API and referenced by its type
        time:
          $ref: "#/components/schemas/DateTime"
      discriminator:
        propertyName: "type"
        mapping:
          org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-sms: "#/components/schemas/EventQualityConnectedSms"
          org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-data: "#/components/schemas/EventQualityConnectedData"
          org.camaraproject.device-quality-indicator-subscriptions.v0.quality-not-connected: "#/components/schemas/EventQualityNotConnected"
          org.camaraproject.device-quality-indicator-subscriptions.v0.network-type-change: "#/components/schemas/EventNetworkTypeChange"
          org.camaraproject.device-quality-indicator-subscriptions.v0.network-quality: "#/components/schemas/EventNetworkQuality"
          org.camaraproject.device-quality-indicator-subscriptions.v0.network-congestion: "#/components/schemas/EventNetworkCongestion"
          org.camaraproject.device-quality-indicator-subscriptions.v0.data-volume: "#/components/schemas/EventDataVolume"
          org.camaraproject.device-quality-indicator-subscriptions.v0.subscription-ends: "#/components/schemas/EventSubscriptionEnds"
    
    Source:
      type: string
      format: uri-reference
      minLength: 1
      description: |
        Identifies the context in which an event happened, as a non-empty `URI-reference` like:
        - URI with a DNS authority:
          * https://github.com/cloudevents
          * mailto:cncf-wg-serverless@lists.cncf.io
        - Universally-unique URN with a UUID:
          * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - Application-specific identifier:
          * /cloudevents/spec/pull/123
          * 1-555-123-4567
      example: "https://notificationSendServer12.supertelco.com"

    DateTime:
      type: string
      format: date-time
      description: |
        Timestamp of when the occurrence happened.
        If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer,
        however all producers for the same source MUST be consistent in this respect. In other words,
        either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
        It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
        Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
      example: "2018-04-05T17:31:00Z"
    
    # Add the corresponding event structures
    EventQualityConnectedSms:
      description: event structure for quality connected via SMS usage
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"
    
    EventQualityConnectedData:
      description: event structure for quality connected via data usage
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"
    
    EventQualityNotConnected:
      description: event structure for quality not connected
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"
    
    EventNetworkTypeChange:
      description: event structure for network type change
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"
    
    EventNetworkQuality:
      description: event structure for network quality changes
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"
    
    EventNetworkCongestion:
      description: event structure for network congestion
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/BasicDeviceEventData"
    
    EventDataVolume:
      description: event structure for data volume usage thresholds
      allOf:
          - $ref: "#/components/schemas/CloudEvent"
          - type: object
            properties:
              data:
                $ref: "#/components/schemas/BasicDeviceEventData"

    BasicDeviceEventData:
      description: Event detail structure for basic device events
      type: object
      required:
        - device
      properties:
        device:
          $ref: "#/components/schemas/Device"
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    SubscriptionEnds:
      description: Event detail structure for org.camaraproject.device-reachability-status-subscriptions.v0.subscription-ends event
      type: object
      required:
        - device
        - terminationReason
        - subscriptionId
      properties:
        device:
          $ref: "#/components/schemas/Device"
        terminationReason:
          $ref: "#/components/schemas/TerminationReason"
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    TerminationReason:
      type: string
      description: |
        - NETWORK_TERMINATED - API server stopped sending notification
        - SUBSCRIPTION_EXPIRED - Subscription expire time (optionally set by the requester) has been reached
        - SUBSCRIPTION_DELETED - Subscription was deleted by the requester
        - MAX_EVENTS_REACHED - Maximum number of events (optionally set by the requester) has been reached
        - ACCESS_TOKEN_EXPIRED - Access Token sinkCredential (optionally set by the requester) expiration time has been reached
      enum:
        - MAX_EVENTS_REACHED
        - NETWORK_TERMINATED
        - SUBSCRIPTION_EXPIRED
        - SUBSCRIPTION_DELETED
        - ACCESS_TOKEN_EXPIRED

    HTTPSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/HTTPSettings"

    HTTPSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/HTTPSettings"

    HTTPSettings:
      type: object
      properties:
        headers:
          type: object
          description: |-
            A set of key/value pairs that is copied into the HTTP request as custom headers.

            NOTE: Use/Applicability of this concept has not been discussed in Commonalities under the scope of Meta Release v0.4. When required by an API project as an option to meet a UC/Requirement, please generate an issue for Commonalities discussion about it.
          additionalProperties:
            type: string
        method:
          type: string
          description: The HTTP method to use for sending the message.
          enum:
            - POST

    MQTTSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/MQTTSettings"

    MQTTSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/MQTTSettings"

    MQTTSettings:
      type: object
      properties:
        topicName:
          type: string
        qos:
          type: integer
          format: int32
        retain:
          type: boolean
        expiry:
          type: integer
          format: int32
        userProperties:
          type: object
      required:
        - topicName

    AMQPSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/AMQPSettings"

    AMQPSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/AMQPSettings"

    AMQPSettings:
      type: object
      properties:
        address:
          type: string
        linkName:
          type: string
        senderSettlementMode:
          type: string
          enum: ["settled", "unsettled"]
        linkProperties:
          type: object
          additionalProperties:
            type: string

    ApacheKafkaSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/ApacheKafkaSettings"

    ApacheKafkaSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/ApacheKafkaSettings"

    ApacheKafkaSettings:
      type: object
      properties:
        topicName:
          type: string
        partitionKeyExtractor:
          type: string
        clientId:
          type: string
        ackMode:
          type: integer
      required:
        - topicName

    NATSSubscriptionRequest:
      allOf:
        - $ref: "#/components/schemas/SubscriptionRequest"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/NATSSettings"

    NATSSubscriptionResponse:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          properties:
            protocolSettings:
              $ref: "#/components/schemas/NATSSettings"

    NATSSettings:
      type: object
      properties:
        subject:
          type: string
      required:
        - subject

  responses:
    CreateSubscriptionBadRequest400:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            InvalidArgument:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param
            InvalidProtocol:
              value:
                status: 400
                code: INVALID_PROTOCOL
                message: Only HTTP is supported
            InvalidCredential:
              value:
                status: 400
                code: INVALID_CREDENTIAL
                message: Only Access token is supported
            InvalidToken:
              value:
                status: 400
                code: INVALID_TOKEN
                message: Only bearer token is supported
    Generic400:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: "INVALID_ARGUMENT"
            message: "Client specified an invalid argument, request body or query param"
    Generic401:
      description: Authentication problem with the client request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: "UNAUTHENTICATED"
            message: "Request not authenticated due to missing, invalid, or expired credentials"
    DeviceNetworkStatusPermissionDenied403:
      description: |
        Client does not have sufficient permission.
        In addition to regular scenario of `PERMISSION_DENIED`, other scenarios may exist:
          - Phone number cannot be deducted from access token context.(`{"code": "NUMBER_VERIFICATION.INVALID_TOKEN_CONTEXT","message": "Phone number cannot be deducted from access token context"}`)
      headers:
        X-Correlator:
          description: Correlation id for the different services
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          examples:
            PermissionDenied:
              value:
                status: 403
                code: "PERMISSION_DENIED"
                message: "Client does not have sufficient permissions to perform this action"
            InvalidTokenContext:
              value:
                status: 403
                code: INVALID_TOKEN_CONTEXT
                message: Invalid access token context
    CreateSubscription403:
      description: Client does not have sufficient permission
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            PermissionDenied:
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action
            TokenMismatch:
              value:
                status: 403
                code: SUBSCRIPTION_MISMATCH
                message: Inconsistent access token for requested events subscription
    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 403
            code: PERMISSION_DENIED
            message: Client does not have sufficient permissions to perform this action
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
    DeviceNetworkStatusNotFound404:
      description: Resource Not Found
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            NotFound:
              value:
                status: 404
                code: NOT_FOUND
                message: "The specified resource is not found"
            DeviceIdentifierNotFound:
              value:
                status: 404
                code: DEVICE_NOT_FOUND
                message: Some identifier cannot be matched to a device
    Generic406:
      description: Not Acceptable
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_406_NOT_ACCEPTABLE:
              description: API Server does not accept the media type (`Accept-*` header) indicated by API client
              value:
                status: 406
                code: NOT_ACCEPTABLE
                message: The server cannot produce a response matching the content requested by the client through `Accept-*` headers.
    Generic409:
      description: Conflict
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 409
            code: CONFLICT
            message: "The specified resource is in a conflict"
    Generic415:
      description: Unsupported Media Type
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_415_UNSUPPORTED_MEDIA_TYPE:
              description: Payload format of the request is in an unsupported format by the Server. Should not happen
              value:
                status: 415
                code: UNSUPPORTED_MEDIA_TYPE
                message: The server refuses to accept the request because the payload format is in an unsupported format.
    DeviceNetworkStatusUnprocessableEntity422:
      description: Unprocessable Entity
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            UnsupportedDeviceIdentifiers:
              value:
                status: 422
                code: UNSUPPORTED_DEVICE_IDENTIFIERS
                message: "None of the provided device identifiers is supported by the implementation"
            InconsistentDeviceIdentifiers:
              value:
                status: 422
                code: DEVICE_IDENTIFIERS_MISMATCH
                message: Device identifiers mismatch
            DeviceNotSupported:
              value:
                status: 422
                code: DEVICE_NOT_APPLICABLE
                message: Service not applicable to the device
    CreateSubscriptionUnprocessableEntity422:
      description: Unprocessable Entity
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            MultieventSubscriptionNotSupported:
              value:
                status: 422
                code: MULTIEVENT_SUBSCRIPTION_NOT_SUPPORTED
                message: Multi event types subscription not managed
            DeviceIdentifierMismatch:
              description: Inconsistency between device identifiers not pointing to the same device
              value:
                status: 422
                code: DEVICE_IDENTIFIERS_MISMATCH
                message: Provided device identifiers are not consistent.
            DeviceNotApplicable:
              description: Service is not available for the provided device
              value:
                status: 422
                code: DEVICE_NOT_APPLICABLE
                message: The service is not available for the provided device.
    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Either out of resource quota or reaching rate limiting.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: API Server request limit is overpassed
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Either out of resource quota or reaching rate limiting.
    Generic500:
      description: Server error
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: "INTERNAL"
            message: "Server error"
    Generic501:
      description: Not Implemented
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_501_NOT_IMPLEMENTED:
              description: Service not implemented. The use of this code should be avoided as far as possible to get the objective to reach aligned implementations
              value:
                status: 501
                code: NOT_IMPLEMENTED
                message: This functionality is not implemented yet.
    Generic502:
      description: Bad Gateway
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_502_BAD_GATEWAY:
              description: Internal routing problem in the Server side that blocks to manage the service properly
              value:
                status: 502
                code: BAD_GATEWAY
                message: An upstream internal service cannot be reached.
    Generic503:
      description: Service unavailable. Typically the server is down.
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: "UNAVAILABLE"
            message: "Service unavailable"
    Generic504:
      description: Gateway Timeout
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_504_TIMEOUT:
              description: API Server Timeout
              value:
                status: 504
                code: TIMEOUT
                message: Request timeout exceeded.
    SubscriptionIdRequired:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            Generic400:
              summary: Schema validation failed
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Client specified an invalid argument, request body or query param"
            subscriptionIdRequired:
              summary: subscription id is required
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Expected property is missing: subscriptionId"

  examples:
    QUALITY_CONNECTED_SMS:
      value:
        id: "123656"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-sms
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: +123456787
          subscriptionId: qs15-h556-rt89-1298
        time: 2023-01-19T13:18:23.682Z
    
    QUALITY_CONNECTED_DATA:
      value:
        id: "123657"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-data
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: +123456787
          subscriptionId: qs15-h556-rt89-1299
        time: 2023-01-19T14:20:23.682Z
    
    QUALITY_NOT_CONNECTED:
      value:
        id: "123658"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-quality-indicator-subscriptions.v0.quality-not-connected
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: +123456787
          subscriptionId: qs15-h556-rt89-1300
        time: 2023-01-19T15:45:23.682Z
    
    NETWORK_TYPE_CHANGE:
      value:
        id: "123659"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-quality-indicator-subscriptions.v0.network-type-change
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: +123456788
          oldNetworkType: "4G"
          newNetworkType: "5G"
          subscriptionId: qs15-h556-rt89-1301
        time: 2023-01-19T16:30:23.682Z
    
    NETWORK_QUALITY:
      value:
        id: "123660"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-quality-indicator-subscriptions.v0.network-quality
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: +123456789
          networkQuality: "High"
          subscriptionId: qs15-h556-rt89-1302
        time: 2023-01-19T17:12:23.682Z
    
    NETWORK_CONGESTION:
      value:
        id: "123661"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-quality-indicator-subscriptions.v0.network-congestion
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: +123456780
          congestionLevel: "Severe"
          subscriptionId: qs15-h556-rt89-1303
        time: 2023-01-19T18:22:23.682Z
    
    DATA_VOLUME:
      value:
        id: "123662"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-quality-indicator-subscriptions.v0.data-volume
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: +123456781
          dataUsageThreshold: "75%"
          subscriptionId: qs15-h556-rt89-1304
        time: 2023-01-19T19:10:23.682Z
    
    SUBSCRIPTION_ENDS:
      value:
        id: "123663"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.device-quality-indicator-subscriptions.v0.subscription-ends
        specversion: "1.0"
        datacontenttype: application/json
        data:
          device:
            phoneNumber: +123456789
          terminationReason: SUBSCRIPTION_EXPIRED
          subscriptionId: qs15-h556-rt89-1305
        time: 2024-03-22T05:40:23.682Z
    
    SUBSCRIPTION_ACTIVE:
      value:
        id: 550e8400-e29b-41d4-a716-446655440000
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
          - "org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-data"
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: 2024-07-17T13:18:23.682Z
          subscriptionMaxEvents: 5
          initialEvent: true
        startsAt: 2024-07-03T21:12:02.871Z
        expiresAt: 2024-07-03T21:12:02.871Z
        status: ACTIVE
    
    SUBSCRIPTION_ACTIVATION_REQUESTED:
      value:
        id: 550e8400-e29b-41d4-a716-446655440000
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
          - "org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-data"
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: 2024-07-17T13:18:23.682Z
          subscriptionMaxEvents: 5
          initialEvent: true
        startsAt: 2024-07-03T21:12:02.871Z
        expiresAt: 2024-07-03T21:12:02.871Z
        status: ACTIVATION_REQUESTED
    
    SUBSCRIPTION_DELETED:
      value:
        id: 550e8400-e29b-41d4-a716-446655440000
        sink: https://endpoint.example.com/sink
        protocol: HTTP
        types:
          - "org.camaraproject.device-quality-indicator-subscriptions.v0.quality-connected-data"
        config:
          subscriptionDetail:
            device:
              phoneNumber: "+123456789"
          subscriptionExpireTime: 2024-07-17T13:18:23.682Z
          subscriptionMaxEvents: 5
          initialEvent: true
        startsAt: 2024-07-03T21:12:02.871Z
        expiresAt: 2024-07-03T21:12:02.871Z
        status: DELETED
