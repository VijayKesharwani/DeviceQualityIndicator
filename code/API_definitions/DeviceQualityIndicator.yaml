openapi: 3.0.3
info:
  title: Device Quality Indicator
  description: |
    This API allows customers to query the device network status, including availability, open data volume, congestion, historical congestion, and connectivity status (2G, 3G, 4G, 5G).

    # Introduction

    ## Device Quality Indicator

    API consumer is able to inquire device's connected network status.

    # Relevant terms and definitions

    * **Device**: A device refers to any physical entity that can connect to a network and participate in network communication.
      At least one identifier for the device (user equipment) out of four options: IPv4 address, IPv6 address, Phone number, or Network Access Identifier assigned by the mobile network operator for the device.

    * **Availability**: It provides the customer with the ability to check if a device is losing connection to the network or gets reachable again, and the roaming status.
      - `CONNECTED_SMS`, if device is connected to the network via SMS usage 
      - `CONNECTED_DATA`, if device is connected to the network via data usage' 
      - `NOT_CONNECTED`, if device is not connected to the network'
    * **Network Insights**: The network provide application's networking requirements can be met for a given end user session.
    * **Network Type** : Network Type is intended to provide insight to connected network's capabilities from standards perspective.  Actual network capabilities may differ based on implementation and MUST be checked with the connected network provider.
      - `4GLTE`, if device is connected to the 4G network
      - `5GNSA`, if device's is connected to the 4G network but using 5G New Radio (NR) capability
      - `5GSA`, if device is connected to the 5G network
      - `NON3GPP4G`, if device is connected to the 4G network via WiFi network
      - `NON3GPP5G`, if device's is connected to the 5G network via WiFi network
      
    * **Remaining data volume**: Remaining data volume of the contract: <200MB/<1GB/...
      - `size`, The size field defines the remaining data volume with possible values such as <200MB, <1GB, etc.
    * **Speed limit** : Speed limitations of the contract.

    # API Functionality

    The API exposes following capabilities:

    ## Device Quality Indicator

    The endpoint `POST /retrieve` allows to get Device Network Status.
    The endpoint 'POST /subscriptions` provide enum of predefined categories, when changing to the specific category or on all changes.


    ## Further info and support

    (FAQs will be added in a later version of the documentation)

  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: wip
externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/

servers:
  - url: "{apiRoot}/device-quality-indicator/v0"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
tags:
  - name: Device Quality Indicator
    description: Operations to get the device network status device is connected to
paths:
  /retrieve:
    post:
      tags:
        - Device Quality Indicator
      summary: "Get the device network status"
      description: Get the device network status
      operationId: getDeviceNetworkStatus
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - openId:
            - device-network-status:read
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestDeviceNetworkStatus"
        required: true
      responses:
        "200":
          description: Contains device network status
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceNetworkStatusResponse"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/DeviceNetworkStatusPermissionDenied403"
        "404":
          $ref: "#/components/responses/DeviceNetworkStatusNotFound404"
        "406":
          $ref: "#/components/responses/Generic406"
        "415":
          $ref: "#/components/responses/Generic415"
        "422":
          $ref: "#/components/responses/DeviceNetworkStatusUnprocessableEntity422"
        "429":
          $ref: "#/components/responses/Generic429"
        "500":
          $ref: "#/components/responses/Generic500"
        "501":
          $ref: "#/components/responses/Generic501"
        "502":
          $ref: "#/components/responses/Generic502"
        "503":
          $ref: "#/components/responses/Generic503"
        "504":
          $ref: "#/components/responses/Generic504"
components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
  schemas:
    LastStatusTime:
      description: Last time that the associated connected Network Type was updated
      type: string
      format: date-time
      example: "2024-02-20T10:41:38.657Z"

    DeviceNetworkStatusResponse:
      type: object
      required:
        - availabilityStatus
        - networkType
        - networkQualityInsight
        - remainingDataVolume
        - speedLimit
      properties:
        lastStatusTime:
          $ref: "#/components/schemas/LastStatusTime"
        availabilityStatus:
          $ref: "#/components/schemas/AvailabilityStatus"
        networkQualityInsight:
          $ref: "#/components/schemas/NetworkQualityInsight"
        networkType:
          $ref: "#/components/schemas/NetworkType"
        remainingDataVolume:
          $ref: "#/components/schemas/RemainingDataVolume"
        speedLimit:
          $ref: "#/components/schemas/SpeedLimit"
    AvailabilityStatus:
      description: |
        CONNECTED_DATA: The device is connected to the network for Data usage

        CONNECTED_SMS: The device is connected to the network for SMS usage

        NOT_CONNECTED: The device is not connected
      type: string
      enum:
        - CONNECTED_DATA
        - CONNECTED_SMS
        - NOT_CONNECTED
    NetworkType:
      description: |
        * NOT_CONNECTED: The device is not connected to network
        * 4GLTE: 4th Generation Mobile Communication Technology aka LTE
        * 5GNSA:4th Generation Mobile Communication Technology aka LTE with device connected 5G New Radio (NR)
        * 5GSA: 5th Generation Mobile Communication Technology
        * NON3GPP4G: Device connected via non-3GPP Radio Access Technology but connected to 4G Network (e.g. WiFi Calling)
        * NON3GPP5G: Device connected via non-3GPP Radio Access Technology but connected to 5G Network (e.g. WiFi Calling)
      type: string
      enum:
        - 4GLTE
        - 5GNSA
        - 5GSA
        - NON3GPP4G
        - NON3GPP5G
        - NOT-CONNECTED
    NetworkQualityInsight:
      type: object
      description: the network's confidence level at being able to meet the
        network demands of a given policy for a given terminal device.
      properties:
        packetDelayBudget:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        targetMinDownstreamRate:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        targetMinUpstreamRate:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        packetlossErrorRate:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        jitter:
          $ref: "#/components/schemas/PolicyFulfillmentConfidence"
        additionalKPIs:
          $ref: "#/components/schemas/AdditionalKpis"
    PolicyFulfillmentConfidence:
      type: string
      description: |
        a plain-language indicator of how confident the network is to meet a
        given network demand.
      enum:
        - meets the application requirements
        - unable to meet the application requirements
    AdditionalKpis:
      description: additional information about connectivity quality
      type: object
      properties:
        signalStrength:
          description: |
            rough indication of the end user device radio signal conditions
          type: string
          enum:
            - excellent
            - good
            - fair
            - poor
            - no signal
        connectivityType:
          description: |
            the access technology connecting the user device to the operator
            network
          type: string
          enum:
            - 5G-SA
            - 5G-NSA
            - 4G
            - 3G
    RemainingDataVolume:
      description: Remaining data volume of the contract allocation
      type: object
      properties:
        size:
          type: string
          description: "Remaining data volume size, for example '<200MB' or '<1GB'."
          enum:
            - "<200MB"
            - "<500MB"
            - "<1GB"
            - "<5GB"
            - "<10GB"
            - "Unlimited"
          example: "<200MB"
    SpeedLimit:
      type: object
      properties:
        limit:
          type: string
          description: "Speed limitations of the contract, for example '<2Mbps' or '<10Mbps'."
          enum:
            - "<1Mbps"
            - "<2Mbps"
            - "<5Mbps"
            - "<10Mbps"
            - "<50Mbps"
            - "Unlimited"
          example: "<2Mbps"
    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    RequestDeviceNetworkStatus:
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"
      required:
        - device

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description

  responses:
    Generic400:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: "INVALID_ARGUMENT"
            message: "Client specified an invalid argument, request body or query param"
    Generic401:
      description: Authentication problem with the client request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: "UNAUTHENTICATED"
            message: "Request not authenticated due to missing, invalid, or expired credentials"
    DeviceNetworkStatusPermissionDenied403:
      description: |
        Client does not have sufficient permission.
        In addition to regular scenario of `PERMISSION_DENIED`, other scenarios may exist:
          - Phone number cannot be deducted from access token context.(`{"code": "NUMBER_VERIFICATION.INVALID_TOKEN_CONTEXT","message": "Phone number cannot be deducted from access token context"}`)
      headers:
        X-Correlator:
          description: Correlation id for the different services
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          examples:
            PermissionDenied:
              value:
                status: 403
                code: "PERMISSION_DENIED"
                message: "Client does not have sufficient permissions to perform this action"
            InvalidTokenContext:
              value:
                status: 403
                code: INVALID_TOKEN_CONTEXT
                message: Invalid access token context
    DeviceNetworkStatusNotFound404:
      description: Resource Not Found
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            NotFound:
              value:
                status: 404
                code: NOT_FOUND
                message: "The specified resource is not found"
            DeviceIdentifierNotFound:
              value:
                status: 404
                code: DEVICE_NOT_FOUND
                message: Some identifier cannot be matched to a device
    Generic406:
      description: Not Acceptable
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_406_NOT_ACCEPTABLE:
              description: API Server does not accept the media type (`Accept-*` header) indicated by API client
              value:
                status: 406
                code: NOT_ACCEPTABLE
                message: The server cannot produce a response matching the content requested by the client through `Accept-*` headers.
    Generic409:
      description: Conflict
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 409
            code: CONFLICT
            message: "The specified resource is in a conflict"
    Generic415:
      description: Unsupported Media Type
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_415_UNSUPPORTED_MEDIA_TYPE:
              description: Payload format of the request is in an unsupported format by the Server. Should not happen
              value:
                status: 415
                code: UNSUPPORTED_MEDIA_TYPE
                message: The server refuses to accept the request because the payload format is in an unsupported format.
    DeviceNetworkStatusUnprocessableEntity422:
      description: Unprocessable Entity
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            UnsupportedDeviceIdentifiers:
              value:
                status: 422
                code: UNSUPPORTED_DEVICE_IDENTIFIERS
                message: "None of the provided device identifiers is supported by the implementation"
            InconsistentDeviceIdentifiers:
              value:
                status: 422
                code: DEVICE_IDENTIFIERS_MISMATCH
                message: Device identifiers mismatch
            DeviceNotSupported:
              value:
                status: 422
                code: DEVICE_NOT_APPLICABLE
                message: Service not applicable to the device
    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Either out of resource quota or reaching rate limiting.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: API Server request limit is overpassed
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Either out of resource quota or reaching rate limiting.
    Generic500:
      description: Server error
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: "INTERNAL"
            message: "Server error"
    Generic501:
      description: Not Implemented
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_501_NOT_IMPLEMENTED:
              description: Service not implemented. The use of this code should be avoided as far as possible to get the objective to reach aligned implementations
              value:
                status: 501
                code: NOT_IMPLEMENTED
                message: This functionality is not implemented yet.
    Generic502:
      description: Bad Gateway
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_502_BAD_GATEWAY:
              description: Internal routing problem in the Server side that blocks to manage the service properly
              value:
                status: 502
                code: BAD_GATEWAY
                message: An upstream internal service cannot be reached.
    Generic503:
      description: Service unavailable. Typically the server is down.
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: "UNAVAILABLE"
            message: "Service unavailable"
    Generic504:
      description: Gateway Timeout
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_504_TIMEOUT:
              description: API Server Timeout
              value:
                status: 504
                code: TIMEOUT
                message: Request timeout exceeded.
